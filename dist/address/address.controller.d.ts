import { AddressService } from './address.service';
import { CreateAddressDto } from './dto/create-address.dto';
import { UpdateAddressDto } from './dto/update-address.dto';
export declare class AddressController {
    private readonly addressService;
    constructor(addressService: AddressService);
    create(createAddressDto: CreateAddressDto, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    findAll(): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }[]>;
    findAllByUserId(userId: string, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }[]>;
    findOne(id: string, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    update(id: string, updateAddressDto: UpdateAddressDto, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    remove(id: string, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    setPrimary(id: string, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    getDefaultShippingAddress(userId: string, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    getDefaultBillingAddress(userId: string, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
}
