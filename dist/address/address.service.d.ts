import { PrismaService } from '../prisma/prisma.service';
import { CreateAddressDto } from './dto/create-address.dto';
import { UpdateAddressDto } from './dto/update-address.dto';
export declare class AddressService {
    private prisma;
    private readonly logger;
    constructor(prisma: PrismaService);
    create(createAddressDto: CreateAddressDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    findAll(): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }[]>;
    findAllByUserId(userId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }[]>;
    findOne(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    update(id: string, updateAddressDto: UpdateAddressDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    remove(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    setPrimaryAddress(id: string, userId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    getDefaultShippingAddress(userId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    getDefaultBillingAddress(userId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        region: string | null;
        postalCode: string;
        country: string;
        isPrimary: boolean;
        addressType: string;
    }>;
    private resetPrimaryAddresses;
    toMangopayFormat(address: any): {
        AddressLine1: any;
        AddressLine2: any;
        City: any;
        Region: any;
        PostalCode: any;
        Country: any;
    };
}
