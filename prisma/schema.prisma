// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String
  firstName       String?
  lastName        String?
  isEmailVerified Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  resetPassLinks  ResetPassLink[]
  verifyMailLinks VerifyMailLink[]
  roles           UserRole[]
  mangopayInfo    MangopayInfo?
  addresses       Address[]
  userContracts   UserContract[]
  shares          Share[]           @relation("UserShares")
  boughtTransactions Transaction[] @relation("BuyerRelation")
  soldTransactions Transaction[] @relation("SellerRelation")
  notifications   Notification[]
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  users       UserRole[]
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model ResetPassLink {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerifyMailLink {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id            String   @id @default(uuid())
  addressLine1  String
  addressLine2  String?
  city          String
  region        String?
  postalCode    String
  country       String
  isPrimary     Boolean  @default(false)
  addressType   String   @default("SHIPPING") // SHIPPING, BILLING, BOTH, etc.
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model MangopayInfo {
  id                String           @id @default(uuid())
  mangopayUserId    String           @unique
  userId            String           @unique
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String           // NATURAL, LEGAL, etc.
  status            String           // CREATED, VALIDATED, etc.
  kyc               Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  mangopayWallets   MangopayWallet[]
  kycDocuments      KycDocument[]
}

model MangopayWallet {
  id               String       @id @default(uuid())
  mangopayWalletId String       @unique
  mangopayInfoId   String
  mangopayInfo     MangopayInfo @relation(fields: [mangopayInfoId], references: [id], onDelete: Cascade)
  currency         String       // EUR, USD, etc.
  balance          Float        @default(0)
  status           String       // CREATED, ACTIVE, etc.
  description      String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model KycDocument {
  id                String       @id @default(uuid())
  mangopayDocumentId String      @unique
  mangopayInfoId    String
  mangopayInfo      MangopayInfo @relation(fields: [mangopayInfoId], references: [id], onDelete: Cascade)
  type              String       // IDENTITY_PROOF, ADDRESS_PROOF, REGISTRATION_PROOF, etc.
  status            String       // CREATED, VALIDATION_ASKED, VALIDATED, REFUSED, etc.
  refusalReason     String?      // Raison du refus si le document est refusé
  refusalReasonMessage String?   // Message détaillé du refus
  fileName          String?      // Nom du fichier original
  fileUrl           String?      // URL temporaire du fichier (peut être stocké localement ou sur S3)
  pages             Int          @default(0)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  kycDocumentPages  KycDocumentPage[]
}

model KycDocumentPage {
  id             String       @id @default(uuid())
  kycDocumentId  String
  kycDocument    KycDocument  @relation(fields: [kycDocumentId], references: [id], onDelete: Cascade)
  mangopayPageId String?      // ID de la page dans Mangopay
  fileUrl        String?      // URL temporaire du fichier pour cette page
  pageNumber     Int          // Numéro de la page
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// Nouvelles entités pour la gestion des contrats

model Contract {
  id                    String              @id @default(uuid())
  duration              Int                 // Durée en mois
  rightPercentage       Float               // Pourcentage de droits cédés
  totalValue            Float               // Valeur totale du contrat
  isActive              Boolean             @default(true)
  introductionDate      DateTime            @default(now())
  secondaryMarketEnabled Boolean            @default(false)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  contractRightOwners   ContractRightOwner[]
  contractTracks        ContractTrack[]
  userContracts         UserContract[]
  shares                Share[]             @relation("ContractShares")
  salesStats            SalesStat[]
}

model RightOwner {
  id                 String              @id @default(uuid())
  name               String
  ipiNumber          String              @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  contractRightOwners ContractRightOwner[]
}

model Track {
  id             String           @id @default(uuid())
  trackId        String           @unique  // Identifiant externe
  title          String
  songImage      String?          // URL de l'image
  genreId        String?          // Relation avec le genre (optionnelle)
  albumId        String?          // Relation avec l'album (optionnelle)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  contractTracks ContractTrack[]
  genre          Genre?           @relation(fields: [genreId], references: [id])
  album          Album?           @relation(fields: [albumId], references: [id])
}

model ContractRightOwner {
  id           String      @id @default(uuid())
  contractId   String
  rightOwnerId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  contract     Contract    @relation(fields: [contractId], references: [id], onDelete: Cascade)
  rightOwner   RightOwner  @relation(fields: [rightOwnerId], references: [id], onDelete: Cascade)

  @@unique([contractId, rightOwnerId])
}

model ContractTrack {
  id           String      @id @default(uuid())
  contractId   String
  trackId      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  contract     Contract    @relation(fields: [contractId], references: [id], onDelete: Cascade)
  track        Track       @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([contractId, trackId])
}

// Nouvelle table de jointure pour la relation many-to-many entre User et Contract
model UserContract {
  id           String      @id @default(uuid())
  userId       String
  contractId   String
  role         String      @default("OWNER") // OWNER, CONTRIBUTOR, VIEWER, etc.
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  contract     Contract    @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@unique([userId, contractId])
}

// Nouveau modèle pour les genres musicaux
model Genre {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tracks      Track[]
}

// Nouveau modèle pour les albums
model Album {
  id          String      @id @default(uuid())
  title       String
  artist      String     // Nom de l'artiste (texte)
  artistId    String?    // ID de l'artiste (relation)
  releaseDate DateTime?
  coverImage  String?     // URL de l'image de couverture
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tracks      Track[]
  artistRef   Artist?     @relation(fields: [artistId], references: [id])
}

// Nouveau modèle pour les artistes
model Artist {
  id          String      @id @default(uuid())
  name        String
  ipiNumber   String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  albums      Album[]
}

// Nouveau modèle pour les parts
model Share {
  id          String    @id @default(uuid())
  userId      String
  contractId  String
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation("UserShares", fields: [userId], references: [id], onDelete: Cascade)
  contract    Contract  @relation("ContractShares", fields: [contractId], references: [id], onDelete: Cascade)
  transactions Transaction[] @relation("ShareTransactions")
  priceHistory PriceMedianHistory[]

  @@unique([userId, contractId])
}

// Nouveau modèle pour les transactions
model Transaction {
  id          String    @id @default(uuid())
  buyerId     String
  sellerId    String
  shareId     String
  price       Float
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  buyer       User      @relation("BuyerRelation", fields: [buyerId], references: [id], onDelete: Cascade)
  seller      User      @relation("SellerRelation", fields: [sellerId], references: [id], onDelete: Cascade)
  share       Share     @relation("ShareTransactions", fields: [shareId], references: [id], onDelete: Cascade)
}

// Modèle pour l'historique des prix médians
model PriceMedianHistory {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  shareId     String
  price       Float
  share       Share     @relation(fields: [shareId], references: [id], onDelete: Cascade)

  @@index([createdAt, shareId])
}

// Modèle pour les statistiques de ventes
model SalesStat {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  statType    String    // WEEKLY, MONTHLY
  salesCount  Int
  income      Float     @default(0)  // Montant des revenus associés à cette période
  contractId  String
  contract    Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)
  reports     ReportStat[]

  @@index([contractId, statType])
  @@index([createdAt])
}

// Modèle pour les rapports
model Report {
  id          String      @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      String      // DUE, RECEIVED, PAID
  totalIncome Float       @default(0)
  totalSales  Int         @default(0)
  startDate   DateTime
  endDate     DateTime
  reportStats ReportStat[]
  pdfUrl      String?     // URL du fichier PDF généré
}

// Table de jointure entre Report et SalesStat
model ReportStat {
  id          String    @id @default(uuid())
  reportId    String
  salesStatId String
  createdAt   DateTime  @default(now())
  report      Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)
  salesStat   SalesStat @relation(fields: [salesStatId], references: [id], onDelete: Cascade)

  @@unique([reportId, salesStatId])
}

// Modèle pour les notifications
model Notification {
  id           String    @id @default(uuid())
  userId       String
  type         String    // NEW_SALE, NEW_CONTRACT, PAYMENT_RECEIVED
  title        String
  message      String
  isRead       Boolean   @default(false)
  emailSent    Boolean   @default(false)
  relatedId    String?   // ID de l'entité liée (transaction, contrat, rapport)
  createdAt    DateTime  @default(now())
  readAt       DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}
